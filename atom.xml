<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ankur Goel]]></title>
  <link href="http://AnkurGel.github.io/atom.xml" rel="self"/>
  <link href="http://AnkurGel.github.io/"/>
  <updated>2013-07-13T13:54:27+05:30</updated>
  <id>http://AnkurGel.github.io/</id>
  <author>
    <name><![CDATA[Ankur Goel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cuke up with Cucumber]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/07/11/cuke-up-with-cucumber/"/>
    <updated>2013-07-11T22:25:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/07/11/cuke-up-with-cucumber</id>
    <content type="html"><![CDATA[<p>Recently, I wrote few <a href="https://github.com/AnkurGel/statsample/tree/master/features">features</a> in <a href="http://cukes.info/">Cucumber</a>.
<strong>Cucumber</strong> is a powerful tool which enables us to write automated tests in functional descriptions. These descriptions are as easy to comprehend, as plain English. The purpose of this tool is to perfom BDD(Behavior-Driven-Development).</p>

<p>Consider this small snippet from my <a href="https://github.com/AnkurGel/statsample/blob/master/features/pacf.feature">pacf feature</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> PACF</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  As a statistician</span>
</span><span class='line'><span class="nf">  So that I can quickly evaluate partial autocorrelation of a series</span>
</span><span class='line'><span class="nf">  I want to evaluate pacf</span>
</span><span class='line'>
</span><span class='line'><span class="k">Background:</span><span class="nf"> a timeseries</span>
</span><span class='line'>
</span><span class='line'><span class="k">  Given </span><span class="nf">the following values in a timeseries:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> timeseries</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 10  20  30  40  50  60  70  80  90  100</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 110 120 130 140 150 160 170 180 190 200</span><span class="k"> |</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> check pacf for 10 lags with unbiased</span>
</span><span class='line'><span class="k">  When </span><span class="nf">I provide </span><span class="s">10</span><span class="nf"> lags for pacf</span>
</span><span class='line'><span class="nf">  </span><span class="k">When </span><span class="nf">I provide yw yule walker as method</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">I should get Array as resultant output</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">I should get </span><span class="s">11</span><span class="nf"> values in resultant pacf</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> check pacf for 5 lags with mle</span>
</span><span class='line'><span class="k">  When </span><span class="nf">I provide </span><span class="s">5</span><span class="nf"> lags for pacf</span>
</span><span class='line'><span class="nf">  </span><span class="k">When </span><span class="nf">I provide mle yule walker as method</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">I should get Array as resultant output</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">I should get </span><span class="s">6</span><span class="nf"> values in resultant pacf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, these are tests! And they perform the operations as they say.</p>

<ul>
<li><p><code>Feature</code> denotes the feature this test will cover. It is followed by the description of the feature as:</p>

<ul>
<li><code>As a</code> statistician -> (use-case)</li>
<li><code>So that</code> I can quickly evaluate pacf of a seires -> (purpose)</li>
<li><code>I want</code> to evaluate pacf -> (expected result)</li>
</ul>
</li>
<li><p><code>Given</code> is analogous to <code>before</code> in RSpec. In context of <code>Background</code>, it denotes <code>before all</code>. That is, the forementioned time-series will be available in all scenarios furhter. This timeseries is resolved by <a href="http://rubygems.org/gems/gherkin">Gherkin</a> parser.
This is further resolved after parsing by following definition:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^the following values in a timeseries:$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">series</span><span class="o">|</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">series</span><span class="o">.</span><span class="n">hashes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sequence</span><span class="o">|</span>
</span><span class='line'>    <span class="n">arr</span> <span class="o">+=</span> <span class="n">sequence</span><span class="o">[</span><span class="s1">&#39;timeseries&#39;</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span><span class="o">.</span><span class="n">to_ts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@timeseries</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">to_ts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Scenarios</code> cover the test cases with the combination of <code>When</code>, <code>And</code>, <code>Then</code> keywords.
They are regular English sentences and combine to form a gramatically sound process.
These sentences are then captured by regular-expressions written by programmer. For example;</li>
</ul>


<figure class='code'><figcaption><span>Scenario&#8217;s When clause</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">  </span><span class="k">When </span><span class="nf">I provide </span><span class="s">10</span><span class="nf"> lags for pacf</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Converted DSL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^I provide (\d+) lags for p?acf$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">lags</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@lags</span> <span class="o">=</span> <span class="n">lags</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above will capture the lags and the strings like:</p>

<ul>
<li>When I provide 5 lags for pacf</li>
<li>When I provide 10 lags for acf</li>
</ul>


<p>Result: Compliant for both acf and pacf. :)</p>

<p>You can check my features and step definitions <a href="https://github.com/AnkurGel/statsample/tree/master/features">here</a>.</p>

<p>Cheers<br/>
Ankur Goel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Statsample - Partial Autocorrelation]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/07/06/statsample-partial-autocorrelation/"/>
    <updated>2013-07-06T14:00:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/07/06/statsample-partial-autocorrelation</id>
    <content type="html"><![CDATA[<p>The <strong>partial autocorrelation</strong>(pacf) of an ARMA process is the function defined by the equation: <br/>
<code>f(0) = 1</code>, <code>f(x) = g(x)(x)</code> correlation of series with itself. for <code>x &gt;= 1</code></p>

<p>The first component of every pacf series is 1.</p>

<p>I implemented pacf with yule-walker equations of unbiased and mle outcomes.  Yule-walker equations are the set of equations represented by:  <br/>
<img src="https://upload.wikimedia.org/math/0/b/6/0b6c74023353b9ca598f842c07c3c286.png" alt="Courtesy: Wikipedia" /></p>

<p>Yule-walker uses the <a href="http://en.wikipedia.org/wiki/Toeplitz_matrix">Toeplitz matrix</a>(gives same output when stored in either row-major or column-major form) inverse with the outcomes to generate the intermediate vector results.</p>

<p>Here, we can generate pacf by making use of either <code>unbiased</code> and <code>mle</code> method with yule-walker function. For <code>unbiased</code>, the denominator is <code>(n-k)</code> whereas for <code>mle</code>, it is <code>n</code> (n is the size of time-series). To achieve that, I made use of fantastic Ruby <code>lambdas</code> to make a closure over the variable <code>k</code> as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="nb">method</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">eql?</span> <span class="s1">&#39;yw&#39;</span>
</span><span class='line'>  <span class="c1">#unbiased =&gt; denominator = (n - k)</span>
</span><span class='line'>  <span class="n">denom</span> <span class="o">=-&gt;</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span> <span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1">#mle</span>
</span><span class='line'>  <span class="c1">#denominator =&gt; (n)</span>
</span><span class='line'>  <span class="n">denom</span> <span class="o">=-&gt;</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below might have been a viable shortcut, but I used former for maintaining descriptive comments and simplicity in code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">denom</span> <span class="o">=-&gt;</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="nb">method</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="s1">&#39;yw&#39;</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="p">)</span> <span class="p">:</span> <span class="n">n</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www-stat.wharton.upenn.edu/~steele/Courses/956/ResourceDetails/YWSourceFiles/YW-Eshel.pdf">Here is the useful description</a> and theoretical implementation of yule-walker by <em>University of Pennsylvania</em>.</p>

<p>Henceforth, the overall yule-walker method looks like following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">yule_walker</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">method</span><span class="o">=</span><span class="s1">&#39;yw&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#From the series, estimates AR(p)(autoregressive) parameter</span>
</span><span class='line'>  <span class="c1">#using Yule-Waler equation. See -</span>
</span><span class='line'>  <span class="c1">#http://en.wikipedia.org/wiki/Autoregressive_moving_average_model</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#parameters:</span>
</span><span class='line'>  <span class="c1">#ts = series</span>
</span><span class='line'>  <span class="c1">#k = order, default = 1</span>
</span><span class='line'>  <span class="c1">#method = can be &#39;yw&#39; or &#39;mle&#39;. If &#39;yw&#39; then it is unbiased, denominator</span>
</span><span class='line'>  <span class="c1">#is (n - k)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#returns:</span>
</span><span class='line'>  <span class="c1">#rho =&gt; autoregressive coefficients</span>
</span><span class='line'>  <span class="n">ts</span> <span class="o">=</span> <span class="n">series</span> <span class="c1">#timeseries</span>
</span><span class='line'>  <span class="n">ts</span> <span class="o">=</span> <span class="n">ts</span> <span class="o">-</span> <span class="n">ts</span><span class="o">.</span><span class="n">mean</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">ts</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">method</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">eql?</span> <span class="s1">&#39;yw&#39;</span>
</span><span class='line'>    <span class="c1">#unbiased =&gt; denominator = (n - k)</span>
</span><span class='line'>    <span class="n">denom</span> <span class="o">=-&gt;</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1">#mle</span>
</span><span class='line'>    <span class="c1">#denominator =&gt; (n)</span>
</span><span class='line'>    <span class="n">denom</span> <span class="o">=-&gt;</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">r</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">ts</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">denom</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.k</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">ts</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">-l</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">ts</span><span class="o">[</span><span class="n">l</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">ts</span><span class="o">.</span><span class="n">size</span><span class="o">]</span><span class="p">))</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">denom</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">r_R</span> <span class="o">=</span> <span class="n">toeplitz</span><span class="p">(</span><span class="n">r</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mat</span> <span class="o">=</span> <span class="no">Matrix</span><span class="o">.</span><span class="n">columns</span><span class="p">(</span><span class="n">r_R</span><span class="p">)</span><span class="o">.</span><span class="n">inverse</span><span class="p">()</span>
</span><span class='line'>  <span class="n">solve_matrix</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">r</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.r</span><span class="o">.</span><span class="n">size</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>toeplitz</code> method generates the Toeplitz matrix, and <code>solve_matrix</code> solves the equation by using the inverse and matrix muliplication.</p>

<p><code>pacf</code> is available in <code>Statsample::TimeSeries</code> and can be called as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">20</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">10</span> <span class="p">}</span><span class="o">.</span><span class="n">to_ts</span>
</span><span class='line'><span class="c1">#Usage: pacf(lags, method), method = &#39;yw&#39; =&gt; unbiased, &#39;mle&#39; =&gt; mle</span>
</span><span class='line'><span class="n">series</span><span class="o">.</span><span class="n">pacf</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;yw&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; results</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire implementation can be seen at : <a href="https://github.com/AnkurGel/statsample/blob/master/lib/statsample/timeseries.rb#L151">https://github.com/AnkurGel/statsample/blob/master/lib/statsample/timeseries.rb#L151</a> with it&#8217;s tests at : <a href="https://github.com/AnkurGel/statsample/blob/master/test/test_pacf.rb">https://github.com/AnkurGel/statsample/blob/master/test/test_pacf.rb</a></p>

<p>Cheers,
/-Ankur Goel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Statsample - Wald test]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/07/06/statsample-wald-test/"/>
    <updated>2013-07-06T13:59:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/07/06/statsample-wald-test</id>
    <content type="html"><![CDATA[<p>Hi everyone, <br/>
After completing and verifying the integrity of all tests and Ruby versions, I and Claudio started with implementation of Wald Test. He explained it pretty well and was very patient. :)</p>

<p>Wald test is used to test if a series of n acf or pacf indeces are equal to 0.<br/>
For <code>acf</code>, the distribution for a white noise sationary process are approximately independent and identically distributed normal random variables with mean 0 and variance n<sup><sup></sup>-1.</sup></p>

<p>What that means is, if terms in an <code>acf</code> of a timeseries with k lags are squared and added (sum-of-squares), then that statistic is chi-square distributed over degree of freedom, directly dependent on the k number of lags.</p>

<p>I will demonstrate this with example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Create time series</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;statsample&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">Statsample</span><span class="p">:</span><span class="ss">:TimeSeries</span>
</span><span class='line'><span class="n">series</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">30</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">to_time_series</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#find and stores it acf with specific lags</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">series_acf</span> <span class="o">=</span> <span class="n">series</span><span class="o">.</span><span class="n">acf</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#find sum of squares for series_acf using powerful Ruby map and inject.</span>
</span><span class='line'><span class="n">sum_of_sq</span> <span class="o">=</span> <span class="n">series_acf</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, we have managed to find the sum of squares of a acf-series with k = 10 = number of lags. <br/>
Now, we will check whether or not it is less than quantile 0.95 of a <code>chi-square</code> with <code>k</code> degree of freedom.</p>

<p>For that, include <code>Distribution</code> as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#continuing from last snippet</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">Distribution</span>
</span><span class='line'><span class="n">cdf</span> <span class="o">=</span> <span class="no">ChiSquare</span><span class="o">.</span><span class="n">cdf</span><span class="p">(</span><span class="n">sum_of_sq</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cdf</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">05</span>
</span><span class='line'><span class="c1">#=&gt; True</span>
</span></code></pre></td></tr></table></div></figure>


<p>This verifies the Wald test.</p>

<p>The tests can be found on Github repository at: <a href="https://github.com/AnkurGel/statsample/blob/master/test/test_wald2.rb">https://github.com/AnkurGel/statsample/blob/master/test/test_wald2.rb</a></p>

<p>Cheers, <br/>
Ankur Goel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StatSample - Correcting tests and configuration]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/06/24/statsample-correcting-tests-and-configuration/"/>
    <updated>2013-06-24T14:39:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/06/24/statsample-correcting-tests-and-configuration</id>
    <content type="html"><![CDATA[<p>In previous blog, I mentioned about the <code>Shoulda</code> issues with MiniTest while running the tests. The error which I encounter looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  <span class="nb">test </span>git:<span class="o">(</span>master<span class="o">)</span> ✗ ruby test_anovaoneway.rb
</span><span class='line'>test_anovaoneway.rb:3:in <span class="sb">`</span>&lt;class:StatsampleAnovaOneWayTestCase&gt;<span class="s1">&#39;: undefined method `context&#39;</span> <span class="k">for </span>StatsampleAnovaOneWayTestCase:Class <span class="o">(</span>NoMethodError<span class="o">)</span>
</span><span class='line'>  from test_anovaoneway.rb:2:in <span class="sb">`</span>&lt;main&gt;<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">➜  test git:(master) ✗ ruby test_regression.rb </span>
</span><span class='line'><span class="s1">test_regression.rb:4:in `&lt;class:StatsampleRegressionTestCase&gt;&#39;</span>: undefined method <span class="sb">`</span>context<span class="s1">&#39; for StatsampleRegressionTestCase:Class (NoMethodError)</span>
</span><span class='line'><span class="s1">  from test_regression.rb:3:in `&lt;main&gt;&#39;</span>
</span><span class='line'>➜  <span class="nb">test </span>git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></code></pre></td></tr></table></div></figure>


<p>While adding tests for regression, I worked around it by converting them in pure <code>MiniTest</code> references. I just <a href="https://github.com/AnkurGel/statsample/commit/734f3be565090b7168b286fec90a48c07089fdba">committed tests</a> for F following similar analogy. I am currently trying to make Shoulda work which could probably save some work involved in conversion.</p>

<p>For setting up StatSample to make it work on multiple Ruby versions, I have configured <a href="https://rvm.io/"><code>rvm</code></a>(tool to manage multiple ruby environments with their own gemsets) with Ruby <code>1.9.2-p320</code>, <code>1.9.3</code>. I also <a href="https://github.com/AnkurGel/statsample/commit/acc618ef5fd26577e65484024d4086ede4f226d6">committed</a> a clean <code>gemspec</code> for StatSample. I hope to make StatSample compatible for both first, and then fix it for <code>Ruby-1.8.x</code>, as this is usually the workflow which <em>just works</em>.</p>

<p>As always, project can be forked from <a href="http://github.com/AnkurGel/statsample">http://github.com/AnkurGel/statsample</a>.  <br/>
You can now build it by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem build statsample.gemspec
</span><span class='line'>gem install statsample-1.1.0.2013.gem
</span></code></pre></td></tr></table></div></figure>


<p>Do let me know of any trouble you encounter at ankurgel at gmail dot com.</p>

<p>Cheers! <br/>
-Ankur Goel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StatSample | Code Begins]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/06/22/statsample-code-begins/"/>
    <updated>2013-06-22T09:51:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/06/22/statsample-code-begins</id>
    <content type="html"><![CDATA[<p>Hi everyone!</p>

<p>This summer, I am working with Ruby Science Foundation for StatSample project. As you must have read in <a href="http://ankurgoel.com/blog/archives/">previous blog posts</a>; StatSample is a powerful statistical library in <strong>Ruby</strong>. Unfortunately, development of this great utility has been on hold from last 2 years. My project aims to revamp StatSample and primarily to enhance functionality for TimeSeries and Generalized Linear Models.</p>

<p>You can read more about my proposal, <a href="http://www.google-melange.com/gsoc/project/google/gsoc2013/ankurgel/63001">here</a>.</p>

<p>During the community bonding period, I initially studied on few topics which my project is concerned about - primarily, estimation methods like <a href="https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average">ARIMA</a>. I saw it&#8217;s implementation in alternative statistical applications like R and StatsModels. <a href="http://statsmodels.sourceforge.net/devel/generated/statsmodels.tsa.arima_model.ARIMA.html#statsmodels.tsa.arima_model.ARIMA">StatsModels</a> uses Kalman filter for maximum likelihood and provides other estimations such as <a href="http://en.wikipedia.org/wiki/Likelihood_function#Log-likelihood">log-likelihood</a> and conditional-sum-of-squares etc. The basic interface for ARIMA in StatsModels is as follows:</p>

<figure class='code'><figcaption><span>ARIMA class in StatsModels</span><a href='https://github.com/statsmodels/statsmodels/blob/master/statsmodels/tsa/arima_model.py'>Source code of class</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ARIMA</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">order</span><span class="p">,</span> <span class="n">dates</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="c">#series =&gt; list of timeseries values</span>
</span><span class='line'><span class="c">#order  =&gt; ARIMA order(p=autoregressive, d=differenced, q=moving average)</span>
</span><span class='line'><span class="c">#dates  =&gt; [optional] timeline</span>
</span></code></pre></td></tr></table></div></figure>


<p>The returned ARIMA object can be called with :</p>

<ul>
<li><a href="https://github.com/statsmodels/statsmodels/blob/master/statsmodels/tsa/arima_model.py#L924"><code>fit(...)</code></a> for maximum likelihood with primarily three methods - maximum-likelihood, conditional-sum-of-squares, css-then-mle.</li>
<li><a href="https://github.com/statsmodels/statsmodels/blob/master/statsmodels/tsa/arima_model.py#L1004"><code>predict(...)</code></a>, it is a recursive function which gives back list of predictedvalues for supplied varying series.</li>
<li><a href="https://github.com/statsmodels/statsmodels/blob/master/statsmodels/tsa/arima_model.py#L667"><code>loglike_css(...)</code></a> - stands for conditional-sum-of-squares, returns aggregated css value.</li>
</ul>


<p>The R Project too has substantial work in ARIMA. I talked about it on <a href="https://groups.google.com/forum/?fromgroups=#!topic/sciruby-dev/Qc62IG7RMi0">mailing list</a>. Thanks to <a href="https://groups.google.com/d/msg/sciruby-dev/Qc62IG7RMi0/J9AYMi7-V2YJ">John&#8217;s concerns</a>, researching more in StatsModels was good idea than in R. In StatSample, we <em>should</em> work on ARIMA module as idiomatically they have done in <a href="https://github.com/statsmodels/statsmodels/blob/master/statsmodels/tsa/arima_model.py">StatsModels</a>. <br/>
Beside this, I honestly didn&#8217;t get much time to devote to project during this period because of my then ongoing semester examinations, which I initially brought into notice to my mentors.</p>

<p>Currently, I am working on repairing and brining uniformity in tests. StatSample&#8217;s tests are written in MiniTest <strong>primarily</strong>, and somewhere making use of <code>shoulda</code> DSL. Tests using the latter, are breaking on my system with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  <span class="nb">test </span>git:<span class="o">(</span>master<span class="o">)</span> ✗ ruby test_anovaoneway.rb
</span><span class='line'>test_anovaoneway.rb:3:in <span class="sb">`</span>&lt;class:StatsampleAnovaOneWayTestCase&gt;<span class="s1">&#39;: undefined method `context&#39;</span> <span class="k">for </span>StatsampleAnovaOneWayTestCase:Class <span class="o">(</span>NoMethodError<span class="o">)</span>
</span><span class='line'>  from test_anovaoneway.rb:2:in <span class="sb">`</span>&lt;main&gt;<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">➜  test git:(master) ✗ ruby test_regression.rb </span>
</span><span class='line'><span class="s1">test_regression.rb:4:in `&lt;class:StatsampleRegressionTestCase&gt;&#39;</span>: undefined method <span class="sb">`</span>context<span class="s1">&#39; for StatsampleRegressionTestCase:Class (NoMethodError)</span>
</span><span class='line'><span class="s1">  from test_regression.rb:3:in `&lt;main&gt;&#39;</span>
</span><span class='line'>➜  <span class="nb">test </span>git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></code></pre></td></tr></table></div></figure>


<p>To aid this, I am correcting and testing specs as : <a href="https://github.com/AnkurGel/statsample/commit/47ff467f9866798e0917cd75ccb21ad046c3b0d3">commit</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  statsample git:<span class="o">(</span>master<span class="o">)</span> ✗ ruby <span class="nb">test</span>/test_regression2.rb
</span><span class='line'>Run options: --seed 40873
</span><span class='line'>
</span><span class='line'><span class="c"># Running tests:</span>
</span><span class='line'>
</span><span class='line'>..S......
</span><span class='line'>
</span><span class='line'>Finished tests in 0.176938s, 50.8652 tests/s, 740.3708 assertions/s.
</span><span class='line'>
</span><span class='line'>9 tests, 131 assertions, 0 failures, 0 errors, 1 skips
</span><span class='line'>➜  statsample git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully, setting up the codebase in good position will work great as I dwell in coding further with TimeSeries.</p>

<p>Github: <a href="http://github.com/AnkurGel/statsample">http://github.com/AnkurGel/statsample</a></p>

<p>Cheers! <br/>
-Ankur Goel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Examples with Statsample]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/04/24/examples-with-statsample/"/>
    <updated>2013-04-24T16:51:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/04/24/examples-with-statsample</id>
    <content type="html"><![CDATA[<h2><u>TimeSeries</u></h2>

<p>Statsample has a module for Time Series as <code>Statsample::TimeSeries</code>. This module has a class named <code>TimeSeries</code> which enables users to perform operations on sequence of data points, indexed by time and ordered from earliest to latest. Example: Stock data.
Suppose, we have a time series as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">timeseries</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nb">rand</span> <span class="mi">100</span> <span class="p">}</span><span class="o">.</span><span class="n">to_ts</span>
</span><span class='line'><span class="c1">#=&gt; Time Series(type:scale, n:10)[62,91,92,71,86,99,80,64,15,94]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the returned TimeSeries object which is now capable of performing several interesting operations such as:</p>

<h3>Lag</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">timeseries</span><span class="o">.</span><span class="n">lag</span>
</span><span class='line'><span class="c1">#=&gt; Vector(type:scale, n:10)[nil,62,91,92,71,86,99,80,64,15]</span>
</span><span class='line'><span class="n">timeseries</span><span class="o">.</span><span class="n">lag</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1">#Lag of series by three units, will place nil in first three positions.</span>
</span><span class='line'><span class="c1">#=&gt; Vector(type:scale, n:10)[nil,nil,nil,62,91,92,71,86,99,80]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Auto-Correlation</h3>

<p>This is frequently used statistical operation. In Digital signal processing, autocorrelation of series is the cross-correlation of signal with itself, but without the normalization. Though, in statistics, normalization exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">timeseries</span><span class="o">.</span><span class="n">acf</span>
</span><span class='line'><span class="c1">#=&gt; Returns the auto-correlation of series.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Diff</h3>

<p><code>diff</code> performs the first difference of the series. That is difference of series with itself and it&#8217;s first lag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">timeseries</span><span class="o">.</span><span class="n">diff</span>
</span><span class='line'><span class="c1">#=&gt; Time Series(type:scale, n:10)[nil,29,1,-21,15,13,-19,-16,-49,79]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exponential moving average</h3>

<p>Moving average is a finite impulse response filter which creates a series of averages of subsets of full-data to analyze the given set of data points. <br/>
<a href="http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average">EMA</a> is similar to moving average, but more weight is given to latest data. <br/>
<img src="http://user42.tuxfamily.org/chart/manual/chart-ema-weights.png" alt="image_ema" /> <br/>
In StatSample, EMA can be accessed from <code>TimeSeries</code> by calling <code>ema</code> on a timeseries. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t_series</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nb">rand</span> <span class="p">}</span><span class="o">.</span><span class="n">to_timeseries</span>
</span><span class='line'><span class="n">t_series</span><span class="o">.</span><span class="n">ema</span>
</span><span class='line'><span class="n">t_series</span><span class="o">.</span><span class="n">ema</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; uses 15 observations and sets Welles wilder coefficient to true.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>acf</code> takes optional parameters - n(default: 10) that accounts on how many observations to consider and Welles Wilder coefficent(default: zero) which uses smoothing value of <code>2/(n + 1)</code> on false and <code>1/n</code> on true.</p>

<p><code>TimeSeries</code> module, as can be seen, can become highly sophisticated on inclusion of other methods such as <a href="http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model">ARMA Estimation</a> etc.</p>

<h2><u>Simple Random Sampling</u></h2>

<p>SRS is an unbiased technique to choose subset of individuals (sample) from a larger set (called, population). Selection of each individual in that sample is entirely random and has equal probability as other individuals. Various techniques for SRS is <a href="http://stattrek.com/Lesson6/SRS.aspx">given here</a>. <br/>
<code>SRS</code> is a module in StatSample which comprises of various sections for Proportion estimation, confidence intervals, standard deviation, mean estimation etc. <br/>
I covered various tests of SRS methods <a href="https://github.com/AnkurGel/statsample/commit/80f7a73be015d2ac7f531fb2125363a6617f0fab">here</a>, as I explored and understood them. I am currently still writing few more tests for this and other modules in StatSample.</p>

<p>I will update the post as soon as I write them. If anyone wishes me to write about the detailed functionality of this module too, please comment. I will be delighted to do that.</p>

<p>Cheers, <br/>
-Ankur Goel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StatSample]]></title>
    <link href="http://AnkurGel.github.io/blog/2013/04/24/statsample/"/>
    <updated>2013-04-24T13:51:00+05:30</updated>
    <id>http://AnkurGel.github.io/blog/2013/04/24/statsample</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sciruby/statsample">Statsample</a> is a statistical library for Ruby and is actively developed by folks at SciRuby. Currently, Statsample is supported with Ruby 1.8.7, 1.9.1, 1.9.2 and ruby-head.</p>

<p>Statsample is currently makes use of Ruby/GSL which uses NArray for vector and matrix operations. It conflicts with the SciRuby&#8217;s NMatrix which also uses the same class names - NMatrix and NVector. Thus, this conflict makes Statsample unusable for system which already has NMatrix. To aid this, SciRuby developed a fork of <a href="http://github.com/SciRuby/rb-gsl">rb-gsl</a> which makes use of NMatrix instead of NArray. I went through it&#8217;s code structure and found it to be great. Devs did a great job in removing many references of NArray and made use of NMatrix in lieu of that.</p>

<p>Statsample is <a href="https://github.com/SciRuby/sciruby/wiki/Google-Summer-of-Code-2013-Ideas#statsample">purposed idea</a> for <a href="http://google-melange.com">Google Summer of Code 2013</a> program. And, I am excited about making Statsample more flexible by covering various aspects:</p>

<ul>
<li>Make Statsample compatible for Ruby 1.9.3+</li>
<li>Enable Statsample to require <a href="http://github.com/SciRuby/rb-gsl">rb-gsl fork</a> instead.</li>
<li>Add more tests to the code and cover the documentation using existing style of NMatrix.</li>
<li>Implement modules for Generalized Linear Models(GLM) and Time Series Analysis.</li>
</ul>


<p>I have been playing around with existing codebase by writing few examples and test cases from few days and had <a href="https://groups.google.com/forum/?fromgroups=#!topic/sciruby-dev/SqXJLJnd6Xs">discussion</a> about this with fellow folks at SciRuby (John Woods, Claudio Bustos and Carlos Agarie). I&#8217;m very grateful for their response and persuasion. The discussion with them helped me to clarify many aspects which were a little obscure earlier. :)</p>

<p>Just before writing down this blog-entry, I was trying out <strong>TimeSeries</strong> class and it&#8217;s methods. I simply loved it - the ease with which I was able to compute the operations, I learnt back in Digital Signal processing such as lagging of series, autocorrelation, exponential moving average etc is <em>mindblowing</em>. It currently supports many basic operations, which after the successful execution of this project can definitely be expanded.</p>

<p>I will be delighted to work on Statsample in this summer, if given an opportunity.</p>

<p>Cheers! <br/>
- Ankur Goel</p>

<p><em>PS</em>: I will try to blog with example codes in next posts.</p>
]]></content>
  </entry>
  
</feed>
